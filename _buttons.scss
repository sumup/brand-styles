.btn {
  @include transition(color .2s cubic-bezier(.4, .0, .2, 1), background-color .2s cubic-bezier(.4, .0, .2, 1));
  display: inline-block;
  border: 1px solid;
  border-radius: $border-radius;
  cursor: pointer;
  font-size: $font-size-l;
  font-weight: 500;
  line-height: $line-height-s;
  padding: $spacing-s $spacing-xl;
  position: relative;
  white-space: nowrap;
  text-align: center;
  text-decoration: none;

  &:hover,
  &:active,
  &:focus {
    color: $color-brand-darker;
    text-decoration: none;
  }

  &[disabled], &.btn--disabled {
    opacity: .4;
    cursor: default;
  }

  &--loading {
    @include transition(padding .2s ease-in-out);
    padding-right: $spacing-xxl !important;

    .spinner { display: inline-block; }
  }

  // TODO: remove the highlight modifier as we're
  //       going to stick with cta as terminology.
  &#{&}--cta, &#{&}--highlight {
    background-color: $color-highlight;
    border-color: $color-highlight;
    color: white;

    &:hover,
    &:active,
    &:focus {
      background-color: $color-highlight-darker;
      border-color: $color-highlight-darker;

      &[disabled], &.btn--disabled {
        background-color: $color-highlight;
        border-color: $color-highlight;
      }
    }
  }

  // TODO: remove the outline modifier as we're
  //       going to stick with secondary as terminology.
  &#{&}--secondary, &#{&}--outline {
    background-color: transparent;
    border-color: $color-highlight;
    color: $color-highlight;

    &:hover,
    &:active,
    &:focus {
      border-color: $color-highlight-darker;
      color: $color-highlight-darker;

      &[disabled], &.btn--disabled {
        border-color: $color-highlight;
        color: $color-highlight;
      }
    }
  }

  // TODO: remove the outline-dark modifier as we're going
  //       to strick with secondary as terminology.
  &#{&}--secondary-dark, &#{&}--outline-dark {
    background-color: transparent;
    border: 1px solid $color-dark;
    color: $color-dark;

    &:hover {
      color: white;
      background-color: $color-dark;
    }
  }

  // TODO: clarify if this will stay. Currently it's
  //       only used by the transaction filters on
  //       mobile.
  &#{&}--grey {
    background-color: $color-light;
    border-color: $color-light;
    color: $color-dark;

    &:hover,
    &:active,
    &:focus {
      background-color: darken($color-light, 5%);
      border-color: darken($color-light, 5%);

      &[disabled], &.btn--disabled {
        background-color: $color-light;
        border-color: $color-light;
      }
    }
  }

  &#{&}--warning {
    background-color: darken($color-warning, 5%);
    border-color: darken($color-warning, 5%);
    color: white;

    &:hover,
    &:active,
    &:focus {
      background-color: darken($color-warning, 5%);
      border-color: darken($color-warning, 5%);
    }
  }

  &#{&}--alert {
    background-color: $color-error;
    border-color: $color-error;
    color: white;

    &:hover,
    &:active,
    &:focus {
      background-color: $color-error;
      border-color: $color-error;
    }
  }

  &#{&}--s {
    padding: $spacing-xs $spacing-m;
    font-size: $font-size-m;
    line-height: $line-height-s;

    &.btn--loading .spinner {
      right: 9px;
      top: 10px;
    }
  }
}

/* Text buttons */

.text-btn {
  background: none;
  border: 0;
  cursor: pointer;
  font-size: $font-size-m;
  font-weight: 500;
  line-height: $line-height-s;
  padding: 0;

  &#{&}--highlight {
    color: $color-highlight;

    &[disabled], &.btn--disabled {
      color: lighten($color-highlight, .2);
    }
  }

  &#{&}--brand {
    color: $color-brand;

    &[disabled], &.btn--disabled {
      color: lighten($color-brand, 20%);
    }
  }

  &#{&}--dark {
    color: $color-dark;

    &[disabled], &.btn--disabled {
      color: lighten($color-dark, 20%);
    }
  }

  &:focus { outline: none }
}


/**
 * Loading spinner
 * Apply .loading to parent button to enable spinner
 */

.spinner {
  @include size(18px);
  @include transition(all .3s .2s ease-in-out);
  background: url('/images/spinner-bright.svg') no-repeat center center;
  display: none;
  position: absolute;
}

.btns {
  &#{&}--inline {
    @include display(inline-flex);
    @include justify-content(space-between);
    @include align-items(center);
    width: 100%;

    &#{&}-text {
      @include justify-content(flex-start);
    }

    &>:not(:last-child) {
      margin-right: $spacing-xs;
    }

    @include media($breakTabletPortrait) {
      @include justify-content(flex-start);
      width: auto;

      &>:not(:last-child) {
        margin-right: $spacing-s;
      }
    }
  }

  &--connected {
    margin-bottom: $spacing-s;

    .btn {
      border-radius: 0;
      border-style: solid;
      border-color: $color-brand;
      border-width: 0 1px;

      // TODO: Rename the brand and outline-brand modifiers. Since this
      //       brand button style is only used here, maybe make the default
      //       style look like outline-brand and add a --selected modifier
      //       for the fill state?
      &--brand {
        background-color: $color-brand;
        color: white;
      }

      &--outline-brand {
        background-color: transparent;
        border: 1px solid $color-brand;
        color: $color-brand;

        &:hover {
          color: white;
          background-color: $color-brand;
        }
      }

      &[disabled] {
        opacity: 1;

        &:hover {
          background-color: $color-brand;
        }
      }

      &:first-child {
        border-radius: $border-radius $border-radius 0 0;
        border-width: 1px;
      }

      &:last-child {
        border-radius: 0 0 $border-radius $border-radius;
        border-width: 1px;
      }
    }

    .btn.btn--s {
      padding: 0.7em 1.4em;
      margin: 0;
    }

    @include media($breakTabletLandscape) {
      .btn {
        border-width: 1px 1px 1px 0;

        &:first-child {
          border-width: 1px;
          border-radius: $border-radius 0 0 $border-radius;
        }
        &:last-child {
          border-width: 1px 1px 1px 0;
          border-radius: 0 $border-radius $border-radius 0;
        }
      }
    }
  }
}
